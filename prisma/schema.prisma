// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  login        String   @unique
  password     String
  refreshToken String?
  version      Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Artist {
  id         String      @id @default(uuid()) @db.Uuid
  name       String
  grammy     Boolean     @default(false)
  Album      Album[]
  Track      Track?
  FaveArtist FaveArtist?
}

model Album {
  id        String     @id @default(uuid()) @db.Uuid
  name      String
  year      Int
  artistId  String?    @unique @db.Uuid
  artist    Artist?    @relation(fields: [artistId], references: [id], onDelete: SetNull)
  Track     Track?
  FaveAlbum FaveAlbum?
}

model Track {
  id        String     @id @default(uuid()) @db.Uuid
  name      String
  duration  Int
  artistId  String?    @unique @db.Uuid
  artist    Artist?    @relation(fields: [artistId], references: [id], onDelete: SetNull)
  albumId   String?    @unique @db.Uuid
  album     Album?     @relation(fields: [albumId], references: [id], onDelete: SetNull)
  FaveTrack FaveTrack?
}

model FaveArtist {
  artistId String @unique @db.Uuid
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

model FaveAlbum {
  albumId String @unique @db.Uuid
  album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
}

model FaveTrack {
  trackId String @unique @db.Uuid
  track   Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
}
